<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.6.xsd">

    <changeSet id="init db" author="author name">
        <sql>
            create table if not exists theme (
            id bigserial primary key,
            name varchar not null
            );

            create table if not exists card (
            id bigserial primary key,
            name varchar not null,
            description varchar not null,
            theme_id bigint not null
            );

            insert into theme(id, name) values (1, 'функции JS');
            insert into theme(id, name) values (2, 'аннотации Spring');

            insert into card(theme_id, name, description) values (1, 'concat()', 'объединяет два или более массивов и возвращает новый массив.');
            insert into card(theme_id, name, description) values (1, 'join()', 'преобразует все элементы массива в строки и объединяет их в одну строку.');
            insert into card(theme_id, name, description) values (1, 'push()', 'добавляет один или более элементов в конец массива.');
            insert into card(theme_id, name, description) values (1, 'pop()', 'удаляет последний элемент из массива.');
            insert into card(theme_id, name, description) values (1, 'shift()', 'удаляет первый элемент из массива.');
            insert into card(theme_id, name, description) values (1, 'unshift()', 'добавляет один или более элементов в начало массива.');
            insert into card(theme_id, name, description) values (1, 'slice()', 'возвращает новый массив, содержащий выбранные элементы из исходного массива.');
            insert into card(theme_id, name, description) values (1, 'splice()', 'изменяет содержимое массива, удаляя, заменяя или добавляя элементы. ');
            insert into card(theme_id, name, description) values (1, 'sort()', 'сортирует элементы массива по возрастанию.');
            insert into card(theme_id, name, description) values (1, 'reverse()', 'изменяет порядок следования элементов массива на противоположный.');

            insert into card(theme_id, name, description) values (1, 'length', 'возвращает длину строки.');
            insert into card(theme_id, name, description) values (1, 'charAt()', 'возвращает символ по указанному индексу.');
            insert into card(theme_id, name, description) values (1, 'concat()', 'объединяет две или более строки и возвращает новую строку.');
            insert into card(theme_id, name, description) values (1, 'split()', 'разделяет строку на массив подстрок по заданному разделителю.');
            insert into card(theme_id, name, description) values (1, 'trim()', 'удаляет пробельные символы в начале и конце строки.');
            insert into card(theme_id, name, description) values (1, 'toUpperCase()', 'преобразует строку к верхнему регистру.');
            insert into card(theme_id, name, description) values (1, 'toLowerCase()', 'преобразует строку к нижнему регистру.');
            insert into card(theme_id, name, description) values (1, 'indexOf()', 'возвращает индекс первого вхождения подстроки в строку.');
            insert into card(theme_id, name, description) values (1, 'lastIndexOf()', 'возвращает индекс последнего вхождения подстроки в строку.');
            insert into card(theme_id, name, description) values (1, 'replace()', 'заменяет первое вхождение подстроки другой подстрокой.');

            insert into card(theme_id, name, description) values (1, 'toExponential()', 'преобразует число в экспоненциальную форму.');
            insert into card(theme_id, name, description) values (1, 'toFixed()', 'форматирует число с фиксированной точностью после десятичной запятой.');
            insert into card(theme_id, name, description) values (1, 'toString()', 'преобразует число в строку.');
            insert into card(theme_id, name, description) values (1, 'parseInt()', 'преобразует строку в целое число.');
            insert into card(theme_id, name, description) values (1, 'parseFloat()', 'преобразует строку в число с плавающей точкой.');
            insert into card(theme_id, name, description) values (1, 'Math.round()', 'округляет число до ближайшего целого.');
            insert into card(theme_id, name, description) values (1, 'Math.ceil()', 'округляет число вверх до ближайшего целого.');
            insert into card(theme_id, name, description) values (1, 'Math.floor()', 'округляет число вниз до ближайшего целого.');
            insert into card(theme_id, name, description) values (1, 'Math.random()', 'возвращает случайное число от 0 до 1.');

            insert into card(theme_id, name, description) values (2, '@Entity', 'Используется для того, чтобы пометить класс, как класс, который должен быть связан с таблицей в базе данных.');
            insert into card(theme_id, name, description) values (2, '@Id', 'Помечает поле как идентификатор.');
            insert into card(theme_id, name, description) values (2, '@GeneratedValue', 'Описывает тип генерации поля.');
            insert into card(theme_id, name, description) values (2, '@Column', 'Используется для указания, что поле класса должно быть связано с определенным столбцом в таблице базы данных.');
            insert into card(theme_id, name, description) values (2, '@ManyToMany', 'Используется для создания связи Многие ко многим.');
            insert into card(theme_id, name, description) values (2, '@ManyToOne', 'Аннотации для создании связи Один ко многим.');

            insert into card(theme_id, name, description) values (2, '@RestController', 'это аннотация в Spring, которая позволяет создавать RESTful веб-сервисы.');
            insert into card(theme_id, name, description) values (2, '@RequestBody', 'аннотация в Spring Framework для обозначения параметра метода контроллера, который должен быть прочитан из тела HTTP-запроса.');
            insert into card(theme_id, name, description) values (2, '@RequestMapping', 'общая аннотация для определения методов-обработчиков веб-запросов');
            insert into card(theme_id, name, description) values (2, '@PathVariable', 'аннотация для передачи данных в пути URL.');
            insert into card(theme_id, name, description) values (2, '@RequestParam', 'аннотация для передачи параметров запроса.');
        </sql>
    </changeSet>
</databaseChangeLog>